name: Notify Reviewers on Discord

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize

permissions: read-all

jobs:

  notify_discord:
    name: Send PR Notification to Discord
    runs-on: ubuntu-latest
    steps:
      - name: Send PR Notification to Discord
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_AUTHOR="${{ github.event.sender.login }}"
          PR_URL="${{ github.event.pull_request.html_url }}"

          # GitHub ID를 실제 이름으로 변환하는 매핑
          declare -A USER_MAP
          USER_MAP["42kko"]="고경훈"
          USER_MAP["eunSoft"]="심은정"
          USER_MAP["immyeong"]="임명철"
          USER_MAP["dalcheonroadhead"]="전수민"
          USER_MAP["hxcva1"]="박문순"

          # GitHub API에서 PR 정보 가져오기
          API_RESPONSE=$(curl -s -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}")

          PR_BODY=$(echo "$API_RESPONSE" | jq -r '.body // ""')

          echo "🟢 PR 본문 데이터:"
          echo "$PR_BODY"

          # PR 본문에서 "💡 Issue" 섹션 아래 내용 추출 (Markdown 헤더 기준)
          ISSUE_CONTENT=$(echo "$PR_BODY" | sed -n '/^# 💡 Issue$/,/^# /p' | sed '1d;$d')

          # "Issue" 내용이 없으면 기본 메시지 설정
          if [ -z "$ISSUE_CONTENT" ]; then
            ISSUE_CONTENT="Issue 내용이 없습니다."
          fi

          # 리뷰어 목록 가져오기
          REVIEWERS_JSON=$(echo "$API_RESPONSE" | jq '.requested_reviewers // []')

          echo "🟢 리뷰어 JSON 데이터: $REVIEWERS_JSON"

          # 리뷰어 정보를 `· 이름 |` 형식으로 변환하여 GitHub 링크 포함
          REVIEWERS_FIELD=""
          for row in $(echo "$REVIEWERS_JSON" | jq -c '.[]'); do
            LOGIN=$(echo "$row" | jq -r '.login')
            NAME=${USER_MAP[$LOGIN]:-$LOGIN}  # 매핑된 이름이 없으면 GitHub ID 그대로 사용
            REVIEWERS_FIELD="${REVIEWERS_FIELD}· [$NAME](https://github.com/$LOGIN) | "
          done

          # 마지막 " | " 제거
          REVIEWERS_FIELD=$(echo "$REVIEWERS_FIELD" | sed 's/ | $//')

          # 리뷰어가 없으면 기본 메시지 설정
          if [ -z "$REVIEWERS_FIELD" ]; then
            REVIEWERS_FIELD="리뷰어가 없습니다."
          fi

          # 작성자 이름 매핑
          AUTHOR_NAME=${USER_MAP[$PR_AUTHOR]:-$PR_AUTHOR}  # 작성자 이름 매핑

          # JSON 요청 바디 생성
          PAYLOAD=$(jq -n --arg title "📌 Pull Request Created/Updated" \
            --arg description "새로운 PR이 생성되었거나 업데이트되었습니다." \
            --arg pr_title "[$PR_TITLE]($PR_URL)" \
            --arg pr_author "[$AUTHOR_NAME](https://github.com/$PR_AUTHOR)" \
            --arg issue_content "$ISSUE_CONTENT" \
            --arg reviewers "$REVIEWERS_FIELD" \
            --arg timestamp "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
            '{
              "embeds": [{
                "color": 16776960,
                "title": $title,
                "description": $description,
                "fields": [
                  { "name": "PR 제목", "value": $pr_title, "inline": false },
                  { "name": "작성자", "value": $pr_author, "inline": true },
                  { "name": "Issue", "value": $issue_content, "inline": false },
                  { "name": "리뷰어", "value": $reviewers, "inline": false }
                ],
                "timestamp": $timestamp
              }]
            }')

          echo "🟢 생성된 JSON 페이로드:"
          echo "$PAYLOAD" | jq '.'

          # Discord 웹훅 요청 보내기
          curl -H "Content-Type: application/json" -X POST -d "$PAYLOAD" "$DISCORD_URL"
    env:
      GH_TOKEN: ${{ secrets.PR_ASSIGN_KEY }}
      DISCORD_URL: ${{ secrets.DISCORD_WEBHOO_BE }}